# adapted from get-remnux.sh "REMnux-v6-116"
## or from inventory as seen http://www.stavros.io/posts/example-provisioning-and-deployment-ansible/

- name: Creating remnux group
  group: name={{ remnux_user }}
- name: Creating remnux generic account
  user: name={{ remnux_user }} password={{ remnux_pass }} groups={{ remnux_user }},sudo append=yes shell=/bin/bash

- name: Add authorized keys for {{ remnux_user }} user
  authorized_key:
    "user='{{ remnux_user }}' key='{{ item }}'"
  with_file: "{{ remnux_public_keys }}"
  when: remnux_public_keys is defined and remnux_public_keys != ""
  become: yes

- name: adding REMnux repository
  apt_repository: repo='ppa:remnux/stable' state=present
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_release == 'trusty'

- name: adding SIFT repository
  apt_repository: repo='ppa:sift/stable' state=present
  when: ansible_distribution == 'Ubuntu' and (ansible_distribution_release == 'trusty' and ansible_distribution_release == 'xenial')

## Alternative: trusty-backports?
- name: install draios apt gpg key
  apt_key: url=https://s3.amazonaws.com/download.draios.com/DRAIOS-GPG-KEY.public state=present

- name: adding Draios repository (sysdig)
  apt_repository: repo='deb http://download.draios.com/stable/deb stable-$(ARCH)/' state=present
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

# These repositories are needed for REMnux, but are disabled on some Ubuntu 14.04 base builds, so enable them.

- name: Enabling Universe repository
  apt_repository: repo='deb http://archive.ubuntu.com/ubuntu trusty universe' state=present
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_release == 'trusty'
- name: Enabling multiverse repository
  replace: dest=/etc/apt/sources.list regexp='^#(\.*)multiverse$' replace='\1multiverse' backup=yes

- name: REMNUX | packages install
  apt: name={{item}} state=present update_cache=yes
  with_items: "{{ remnux_packages }}"
  notify:
    - Updating ClamAV Signatures
## Note: sometimes can be longer than 1h ...
  async: 7200
  poll: 300

- include: inetsim.yml
  when: remnux_with_inetsim

- block:
    - name: REMNUX | nginx packages install
      apt: name={{item}} state=present update_cache=yes cache_valid_time=3600
      with_items:
        - nginx
    - name: Stopping Nginx daemon
      service: name=nginx state=stopped enabled=no
    - name: Configuring Web Server
      replace:
        dest=/etc/nginx/nginx.conf regexp='worker_processes 4' replace='worker_processes 1'
    - name: Check if /var/www exists
      stat: path=/var/www
      register: www
    - name: Ensure /var/www exists
      file: dest=/var/www owner=www-data group=www-data mode=0755 state=directory
    - name: enable autoindex inside nginx
      replace:
        dest=/etc/nginx/sites-enabled/default regexp='^\s.*location \/ {' replace='\tlocation \/ {\n\t\tautoindex on;'
#      lineinfile: "dest=/etc/nginx/sites-enabled/default line='\t\tautoindex on;' insertafter='^\\s.*location \\/ {'"
  when: remnux_webserver is defined and remnux_webserver == 'nginx'


- block:
    - name: Install pip packages - required version
      pip:
        name: "{{item.name}}"
        version: "{{ item.version }}"
        state: present
      with_items: "{{ remnux_pip_packages_version }}"
    - name: Install pip packages
      pip:
        name: "{{item}}"
        state: present
      with_items: "{{ remnux_pip_packages }}"
  when: remnux_pip_virtualenv == ''
- block:
    - name: Install pip packages - required version
      pip:
        name: "{{item.name}}"
        version: "{{ item.version }}"
        state: present
        virtualenv: "{{ remnux_pip_virtualenv }}"
      with_items: "{{ remnux_pip_packages_version }}"
## avoid conflict on six when installed along sift/trusty
## if get 'setuptools must be installed to install from a source distribution', try to erase virtualenv and replay
## https://github.com/pypa/pip/issues/2931#issuecomment-151074766
    - name: Install pip packages - virtualenv
      pip:
        name: "{{item}}"
        state: present
        virtualenv: "{{ remnux_pip_virtualenv }}"
      with_items: "{{ [ 'setuptools', 'pip', 'pycrypto', 'pyparsing', 'appdirs' ] + remnux_pip_packages }}"
  when: remnux_pip_virtualenv != ''

- name: Install Ruby Gems
  gem: name={{item.n}} version={{ item.v }} state=present user_install=no
  with_items: "{{ remnux_ruby_gems }}"
- name: Install Ruby Gems - v2
  gem:
    name: "{{item}}"
    state: present
    user_install: no
    executable: "{{ remnux_gem_exec }}"
  with_items:
    - passivedns-client

- name: Tweaking Ruby Gems Configuration
  file:
# This is needed for Origami PDF Walker
    dest=/home/{{ remnux_user }}/.local/share owner={{ remnux_user }} group={{ remnux_user }} mode=0700 state=directory
# This is needed for passivedns-client
- name: Check if user passivedns-client config exists
  stat: path=/home/{{ remnux_user }}/.passivedns-client
  register: passivednsclient
- name: Review permissions for passivedns client
  file:
    dest=/home/{{ remnux_user }}/.passivedns-client owner={{ remnux_user }} group={{ remnux_user }} mode=0600 state=touch
  when: not passivednsclient.stat.exists

- name: Updating REMnux documentation
  file: path=/home/{{ remnux_user }}/Desktop owner={{ remnux_user }} state=directory mode=0700
- name: Check /usr/share/remnux/docs/sitemap.xml exists
  stat: path=/usr/share/remnux/docs/sitemap.xml
  register: remnuxdocs
- name: git clone Remnux docs
  git:
    repo=https://github.com/REMnux/docs.git
    dest=/usr/share/remnux/docs
    version=gh-pages
  when: not remnuxdocs.stat.exists
- name: Symlink remnux docs on desktop
  file: src=/usr/share/applications/show-remnux-docs.desktop path='/home/{{ remnux_user }}/Desktop/REMnux Docs' state=link force=yes

- name: Ensure /var/www directory exists
  file: path=/var/www state=directory mode=0755
- name: Map remnux docs inside webserver root
  file: src=/usr/share/remnux/docs path=/var/www/remnux-docs state=link

- name: Creating mount points and other directories
  file:
    dest={{ item }} mode=0755 state=directory
  with_items:
    - /mnt/cdrom
    - /opt
- name: Ensure /var/log/thug directory exists
  file: dest=/var/log/thug mode=0777 state=directory
- name: Disabling Tor
  service: name=tor state=stopped enabled=no
- name: sshd | disable usedns
  lineinfile: dest=/etc/ssh/sshd_config regexp='^UseDNS no' line='UseDNS no'
- name: Stopping ClamAV daemons
  service: name={{ item }} state=stopped enabled=no
  with_items:
    - clamav-daemon
    - clamav-freshclam
  ignore_errors: true

- name: Stopping InspIRCd daemon
  service: name=inspircd state=stopped enabled=no

- debug: var=ansible_virtualization_type
- name: Modules exclusions for VM
  lineinfile:
    dest: /etc/modprobe.d/blacklist.conf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
    create: yes
    backup: yes
  with_items:
    - { regexp: "^blacklist i2c-piix4", line: "blacklist i2c-piix4" }
    - { regexp: "^blacklist intel_rapl", line: "blacklist intel_rapl" }
  when: vm is defined and vm

- name: Debian | Remove some packages
  apt: name={{ item }} state=absent
  with_items:
    - xscreensaver
    - xscreensaver-data

#- name: Setting up /etc/fstab for CD-ROM
#  #lineinfile: dest=/etc/fstab regexp={{ item.regexp }} line="{{ item.line }}" state={{ item.state | default("present") }}
#  lineinfile: dest=/etc/fstab regexp={{ item.regexp }} line="{{ item.line }}" state=present
#    - { regexp: '^/dev/sr0  /mnt/cdrom  udf,iso9660 user,noauto,exec,utf8   0   0', line: '/dev/sr0  /mnt/cdrom  udf,iso9660 user,noauto,exec,utf8   0   0' }
#    - { regexp: '^/dev/fd0', line: '#/dev/fd0' }
- name: Setting up USB auto-mount options
  lineinfile: dest=/etc/usbmount/usbmount.conf regexp='\"$' line=' ntfs exfat\"'
- name: enforce noclobber in remnux user bashrc
  lineinfile: dest=/home/{{ remnux_user }}/.bashrc regexp='^set -o noclobber' line='set -o noclobber' create=yes
- name: Configuring packet capture capabilities for non-root users
#  command: setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip' /usr/bin/dumpcap     ## NOK
#  capabilities: path=/usr/bin/dumpcap capability='CAP_NET_RAW+eip CAP_NET_ADMIN+eip' state=present     ## NOK
  capabilities: path=/usr/bin/dumpcap capability="{{ item }}" state=present
  with_items:
    - CAP_NET_RAW+eip
    - CAP_NET_ADMIN+eip
- name: Configuring sudo
  lineinfile:
    dest: /etc/sudoers
    regexp: "^{{ remnux_user }} ALL=NOPASSWD: ALL"
    line: "{{ remnux_user }} ALL=NOPASSWD: ALL"
    backup: yes
    validate: 'visudo -cf %s'
## why ?
- name: Disable sudoers secure_path
  replace:
    dest: '/etc/sudoers'
    regexp: '^Defaults        secure_path='
    replace: '#Defaults       secure_path='
    backup: yes
    validate: 'visudo -cf %s'

#- name: Setting up aliases
#  lineinfile: dest=/home/{{ remnux_user }}/.bash_aliases regexp={{ item.regexp }} line="{{ item.line }}" state={{ item.state | default("present") }}
#    - { regexp: "alias mountwin='mount -o ro,loop,show_sys_files,streams_interface=windows'", line: "alias mountwin='mount -o ro,loop,show_sys_files,streams_interface=windows" }
#    - { regexp: '', line: '' }
#- lineinfile: dest=/home/{{ remnux_user }}/.bashrc regexp={{ item.regexp }} line="{{ item.line }}" state={{ item.state | default("present") }}
#    - { regexp: 'source /usr/share/remnux/remnux-aliases.sh', line: 'source /usr/share/remnux/remnux-aliases.sh' }
#- lineinfile: dest=/root/bashrc regexp={{ item.regexp }} line="{{ item.line }}" state={{ item.state | default("present") }}
#    - { regexp: 'source /usr/share/remnux/remnux-aliases.sh', line: 'source /usr/share/remnux/remnux-aliases.sh' }

- name: Configuring global PATH
  replace:
    dest=/etc/environment regexp='^PATH="/usr/local/sbin' replace='PATH="/opt/remnux-procdot:/opt/remnux-ratdecoders:/opt/remnux-rabcdasm:/opt/remnux-vivisect:/opt/remnux-peepdf:/opt/remnux-thug/src:/opt/remnux-pdfxray-lite:/opt/remnux-viper:/opt/remnux-oletools:/opt/remnux-balbuzard:/opt/remnux-didier:/opt/remnux-scripts:/usr/local/sbin'

- name: Check if /etc/apt/apt.conf.d/10periodic exists
  stat: path=/etc/apt/apt.conf.d/10periodic
  register: apt10periodic
- name: disable automatic updates
  replace:
    dest=/etc/apt/apt.conf.d/10periodic regexp='^APT::Periodic::Update-Package-Lists \"1\"' replace='APT::Periodic::Update-Package-Lists \"0\";'
  when: apt10periodic.stat.exists

- include: remnux-conf.yml
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_release == 'trusty'

- include: docker.yml
  when: remnux_docker_enable

# Just for fun
- debug: msg="Taking the dog for a walk"

- name: Setting permissions for {{ remnux_user }}
  file: dest=/home/{{ remnux_user }} owner={{ remnux_user }} group={{ remnux_user }}

## cleanup
- name: Check if packages need to be autoremoved
  command: apt-get --dry-run autoremove
  register: check_autoremove
  changed_when: False
- name: Autoremove unused packages
  command: apt-get autoremove -qq -y
  when: "'packages will be REMOVED' in check_autoremove.stdout"
#- command: apt-get clean
- name: Check /usr/share/remnux exists
  stat: path=/usr/share/remnux
  register: shareremnux
- debug: msg="Some REMnux packages didn't install."
  when: not shareremnux.stat.isdir
