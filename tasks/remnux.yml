---
# adapted from get-remnux.sh "REMnux-v6-116"
## or from inventory as seen http://www.stavros.io/posts/example-provisioning-and-deployment-ansible/

- name: Creating remnux group
  group: name={{ remnux_user }}
- name: Creating remnux generic account
  user: name={{ remnux_user }} password={{ remnux_pass }} groups={{ remnux_user }},sudo append=yes shell=/bin/bash

- name: Add authorized keys for {{ remnux_user }} user
  authorized_key:
    "user='{{ remnux_user }}' key='{{ item }}'"
  with_file: "{{ remnux_public_keys }}"
  when: remnux_public_keys is defined and remnux_public_keys
  become: yes

- import_tasks: remnux-repos.yml
- import_tasks: mono.yml
  when: remnux_with_mono|bool
- import_tasks: microsoft.yml
  when: remnux_with_microsoft|bool
- import_tasks: microsoft-vscode.yml
  when: remnux_with_microsoftvscode|bool

- name: REMNUX | packages install
  apt: name={{ remnux_packages }} state=present update_cache=yes
  notify:
    - Updating ClamAV Signatures
  ## Note: sometimes can be longer than 1h ...
  async: 7200
  poll: 300
  register: pkg_result
  until: pkg_result is success

- name: REMNUX | remnux+sift ppa packages install
  apt:
    name:
      - "{{ remnux_ppa_packages }}"
      - "{{ sift_ppa_packages }}"
    state: present
  async: 7200
  poll: 300
  register: pkg_result
  until: pkg_result is success

- include: inetsim.yml
  when: remnux_with_inetsim|bool

- import_tasks: ghidra.yml
  when: remnux_with_ghidra|bool

- block:
    - name: REMNUX | nginx packages install
      apt: name=nginx state=present update_cache=yes cache_valid_time=3600
      register: pkg_result
      until: pkg_result is success
    - name: Stopping Nginx daemon
      service: name=nginx state=stopped enabled=no
    - name: Configuring Web Server
      replace:
        dest: /etc/nginx/nginx.conf
        regexp: 'worker_processes 4'
        replace: 'worker_processes 1'
        mode: '0644'
    - name: Check if /var/www exists
      stat: path=/var/www
      register: www
    - name: Ensure /var/www exists
      file: dest=/var/www owner=www-data group=www-data mode=0755 state=directory
    - name: enable autoindex inside nginx
      replace:
        dest: /etc/nginx/sites-enabled/default
        regexp: '^\s.*location \/ {'
        replace: '\tlocation \/ {\n\t\tautoindex on;'
        mode: '0644'
        # lineinfile: "dest=/etc/nginx/sites-enabled/default line='\t\tautoindex on;' insertafter='^\\s.*location \\/ {'"
  when: remnux_webserver is defined and remnux_webserver == 'nginx'

- block:
    - name: Install pip packages - required version
      pip:
        name: "{{ item.name }}"
        version: "{{ item.version }}"
        state: present
      with_items: "{{ remnux_pip_packages_version | default(_remnux_pip_packages_version) }}"
      register: pkg_result
      until: pkg_result is success
    - name: Install pip packages
      pip:
        name: "{{ remnux_pip_packages }}"
        state: present
      register: pkg_result
      until: pkg_result is success
  when: not remnux_pip_virtualenv|string
- block:
    - name: Install pip packages - required version - virtualenv
      pip:
        name: "{{ item.name }}"
        version: "{{ item.version }}"
        state: present
        virtualenv: "{{ remnux_pip_virtualenv }}"
      with_items: "{{ remnux_pip_packages_version | default(_remnux_pip_packages_version) }}"
    ## avoid conflict on six when installed along sift/trusty
    ## if get 'setuptools must be installed to install from a source distribution', try to erase virtualenv and replay
    ## https://github.com/pypa/pip/issues/2931#issuecomment-151074766
    - name: Install pip packages - virtualenv
      pip:
        name: "{{ [ 'setuptools', 'pip', 'pycrypto', 'pyparsing', 'appdirs' ] + remnux_pip_packages }}"
        state: present
        virtualenv: "{{ remnux_pip_virtualenv }}"
      register: pkg_result
      until: pkg_result is success
  when: remnux_pip_virtualenv|string

- name: Install Ruby Gems
  gem: name={{ item.n }} version={{ item.v }} state=present user_install=no
  with_items: "{{ remnux_ruby_gems }}"
  register: pkg_result
  until: pkg_result is success
- name: Install Ruby Gems - v2
  gem:
    name: passivedns-client
    state: present
    user_install: no
    executable: "{{ remnux_gem_exec }}"
  register: pkg_result
  until: pkg_result is success

- name: Tweaking Ruby Gems Configuration
  file:
    # This is needed for Origami PDF Walker
    dest: "/home/{{ remnux_user }}/.local/share"
    owner: "{{ remnux_user }}"
    group: "{{ remnux_user }}"
    mode: '0700'
    state: directory
# This is needed for passivedns-client
- name: Check if user passivedns-client config exists
  stat: path=/home/{{ remnux_user }}/.passivedns-client
  register: passivednsclient
- name: Review permissions for passivedns client
  file:
    dest: "/home/{{ remnux_user }}/.passivedns-client"
    owner: "{{ remnux_user }}"
    group: "{{ remnux_user }}"
    mode: '0600'
    state: touch
  when: not passivednsclient.stat.exists

- name: Updating REMnux documentation
  file: path=/home/{{ remnux_user }}/Desktop owner={{ remnux_user }} state=directory mode=0700
- name: Check /usr/share/remnux/docs/sitemap.xml exists
  stat: path=/usr/share/remnux/docs/sitemap.xml
  register: remnuxdocs
- name: git clone Remnux docs
  git:
    repo: https://github.com/REMnux/docs.git
    dest: /usr/share/remnux/docs
    version: "{{ remnux_docs_version | default('41d4e5f97dc1d37544213c034348046b9745677e') }}"
  when: not remnuxdocs.stat.exists
- name: Symlink remnux docs on desktop
  file:
    src: /usr/share/applications/show-remnux-docs.desktop
    path: "/home/{{ remnux_user }}/Desktop/REMnux Docs"
    mode: '0777'
    state: link
    force: yes

- name: Ensure /var/www directory exists
  file: path=/var/www state=directory mode=0755
- name: Map remnux docs inside webserver root
  file:
    src: /usr/share/remnux/docs
    path: /var/www/remnux-docs
    mode: '0777'
    state: link

- name: Creating mount points and other directories
  file:
    dest={{ item }} mode=0755 state=directory
  with_items:
    - /mnt/cdrom
    - /opt
- name: Ensure /var/log/thug directory exists
  file: dest=/var/log/thug mode=0777 state=directory
- name: Disabling Tor
  service: name=tor state=stopped enabled=no
- name: sshd | disable usedns
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: '^UseDNS no'
    line: 'UseDNS no'
    mode: '0644'
- name: Stopping ClamAV daemons
  service: name={{ item }} state=stopped enabled=no
  with_items:
    - clamav-daemon
    - clamav-freshclam
  ignore_errors: true

- name: Stopping InspIRCd daemon
  service: name=inspircd state=stopped enabled=no

- name: Debug | ansible_virtualization_type var
  debug: var=ansible_virtualization_type
- name: Modules exclusions for VM
  lineinfile:
    dest: /etc/modprobe.d/blacklist.conf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    mode: '0644'
    state: present
    create: yes
    backup: yes
  with_items:
    - { regexp: "^blacklist i2c-piix4", line: "blacklist i2c-piix4" }
    - { regexp: "^blacklist intel_rapl", line: "blacklist intel_rapl" }
  when: vm is defined and vm

- name: Debian | Remove some packages
  apt:
    name:
      - xscreensaver
      - xscreensaver-data
    state: absent

# - name: Setting up /etc/fstab for CD-ROM
#   #lineinfile: dest=/etc/fstab regexp={{ item.regexp }} line="{{ item.line }}" state={{ item.state | default("present") }}
#   lineinfile: dest=/etc/fstab regexp={{ item.regexp }} line="{{ item.line }}" state=present
#     - { regexp: '^/dev/sr0  /mnt/cdrom  udf,iso9660 user,noauto,exec,utf8   0   0', line: '/dev/sr0  /mnt/cdrom  udf,iso9660 user,noauto,exec,utf8   0   0' }
#     - { regexp: '^/dev/fd0', line: '#/dev/fd0' }
- name: Setting up USB auto-mount options
  lineinfile:
    dest: /etc/usbmount/usbmount.conf
    regexp: '\"$'
    line: ' ntfs exfat\"'
    mode: '0644'
- name: enforce noclobber in remnux user bashrc
  lineinfile:
    dest: "/home/{{ remnux_user }}/.bashrc"
    regexp: '^set -o noclobber'
    line: 'set -o noclobber'
    mode: '0600'
    create: yes
- name: Configuring packet capture capabilities for non-root users
  # command: setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip' /usr/bin/dumpcap     ## NOK
  # capabilities: path=/usr/bin/dumpcap capability='CAP_NET_RAW+eip CAP_NET_ADMIN+eip' state=present     ## NOK
  capabilities:
    path: /usr/bin/dumpcap
    capability: "{{ item }}"
    state: present
  with_items:
    - CAP_NET_RAW+eip
    - CAP_NET_ADMIN+eip
- name: Configuring sudo
  lineinfile:
    dest: /etc/sudoers
    regexp: "^{{ remnux_user }} ALL=NOPASSWD: ALL"
    line: "{{ remnux_user }} ALL=NOPASSWD: ALL"
    mode: '0440'
    backup: yes
    validate: 'visudo -cf %s'
## why ?
- name: Disable sudoers secure_path
  replace:
    dest: '/etc/sudoers'
    regexp: '^Defaults        secure_path='
    replace: '#Defaults       secure_path='
    mode: '0440'
    backup: yes
    validate: 'visudo -cf %s'

# - name: Setting up aliases
#   lineinfile: dest=/home/{{ remnux_user }}/.bash_aliases regexp={{ item.regexp }} line="{{ item.line }}" state={{ item.state | default("present") }}
#     - { regexp: "alias mountwin='mount -o ro,loop,show_sys_files,streams_interface=windows'", line: "alias mountwin='mount -o ro,loop,show_sys_files,streams_interface=windows" }
#     - { regexp: '', line: '' }
# - lineinfile: dest=/home/{{ remnux_user }}/.bashrc regexp={{ item.regexp }} line="{{ item.line }}" state={{ item.state | default("present") }}
#     - { regexp: 'source /usr/share/remnux/remnux-aliases.sh', line: 'source /usr/share/remnux/remnux-aliases.sh' }
# - lineinfile: dest=/root/bashrc regexp={{ item.regexp }} line="{{ item.line }}" state={{ item.state | default("present") }}
#     - { regexp: 'source /usr/share/remnux/remnux-aliases.sh', line: 'source /usr/share/remnux/remnux-aliases.sh' }

- name: Configuring global PATH
  replace:
    dest: /etc/environment
    regexp: '^PATH="/usr/local/sbin'
    replace: 'PATH="/opt/remnux-procdot:/opt/remnux-ratdecoders:/opt/remnux-rabcdasm:/opt/remnux-vivisect:/opt/remnux-peepdf:/opt/remnux-thug/src:/opt/remnux-pdfxray-lite:/opt/remnux-viper:/opt/remnux-oletools:/opt/remnux-balbuzard:/opt/remnux-didier:/opt/remnux-scripts:/usr/local/sbin'  # noqa 204
    mode: '0644'

- name: Check if /etc/apt/apt.conf.d/10periodic exists
  stat: path=/etc/apt/apt.conf.d/10periodic
  register: apt10periodic
- name: disable automatic updates
  replace:
    dest: /etc/apt/apt.conf.d/10periodic
    regexp: '^APT::Periodic::Update-Package-Lists \"1\"'
    replace: 'APT::Periodic::Update-Package-Lists \"0\";'
    mode: '0644'
  when: apt10periodic.stat.exists

- include: remnux-conf.yml
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_release == 'trusty'

- include: docker.yml
  when: remnux_docker_enable

- name: Setting permissions for {{ remnux_user }}
  file:
    dest: "/home/{{ remnux_user }}"
    owner: "{{ remnux_user }}"
    group: "{{ remnux_user }}"
    mode: '0700'

## cleanup
- name: Autoremove unused packages
  apt:
    autoremove: yes
