---
# adapted from get-remnux.sh "REMnux-v6-116"
## or from inventory as seen http://www.stavros.io/posts/example-provisioning-and-deployment-ansible/

- name: Creating remnux group
  ansible.builtin.group:
    name: "{{ remnux_user }}"
- name: Creating remnux generic account
  ansible.builtin.user:
    name: "{{ remnux_user }}"
    password: "{{ remnux_pass }}"
    groups: "{{ remnux_user }},sudo,docker"
    append: "yes"
    shell: "/bin/bash"

- name: Add authorized keys for remnux_user
  ansible.posix.authorized_key:
    user: '{{ remnux_user }}'
    key: '{{ item }}'
  with_file: "{{ remnux_public_keys }}"
  when: remnux_public_keys is defined and remnux_public_keys
  become: yes

- name: Import remnux-repos
  ansible.builtin.import_tasks: remnux-repos.yml
- name: Import mono
  ansible.builtin.import_tasks: mono.yml
  when: remnux_with_mono|bool
- name: Import microsoft
  ansible.builtin.import_tasks: microsoft.yml
  when: remnux_with_microsoft|bool
- name: Import microsoft-vscode
  ansible.builtin.import_tasks: microsoft-vscode.yml
  when: remnux_with_microsoftvscode|bool

- name: REMNUX | packages install
  ansible.builtin.apt:
    name: "{{ remnux_packages }}"
    state: "present"
    update_cache: "yes"
  notify:
    - Updating ClamAV Signatures
  async: 3600
  poll: 60
  register: pkg_result
  until: pkg_result is success

- name: REMNUX | remnux+sift ppa packages install
  ansible.builtin.apt:
    name: "{{ remnux_ppa_packages + sift_ppa_packages }}"
    state: present
  register: pkg_result
  until: pkg_result is success

- name: Import inetsim
  ansible.builtin.import_tasks: inetsim.yml
  when: remnux_with_inetsim|bool

- name: Import ghidra
  ansible.builtin.import_tasks: ghidra.yml
  when: remnux_with_ghidra|bool

- name: Nginx webserver
  when: remnux_webserver is defined and remnux_webserver == 'nginx'
  block:
    - name: REMNUX | nginx packages install
      ansible.builtin.apt:
        name: nginx
        state: present
        update_cache: yes
        cache_valid_time: 3600
      register: pkg_result
      until: pkg_result is success
    - name: Stopping Nginx daemon
      ansible.builtin.service:
        name: nginx
        state: stopped
        enabled: no
    - name: Configuring Web Server
      ansible.builtin.replace:
        dest: /etc/nginx/nginx.conf
        regexp: 'worker_processes 4'
        replace: 'worker_processes 1'
        mode: '0644'
    - name: Check if /var/www exists
      ansible.builtin.stat:
        path: /var/www
      register: www
    - name: Ensure /var/www exists
      ansible.builtin.file:
        dest: /var/www
        owner: www-data
        group: www-data
        mode: 0755
        state: directory
    - name: Enable autoindex inside nginx
      ansible.builtin.replace:
        dest: /etc/nginx/sites-enabled/default
        regexp: '^\s.*location \/ {'
        replace: '\tlocation \/ {\n\t\tautoindex on;'
        mode: '0644'
        # lineinfile: "dest=/etc/nginx/sites-enabled/default line='\t\tautoindex on;' insertafter='^\\s.*location \\/ {'"

- name: System pip
  when: not remnux_pip_virtualenv | string
  block:
    - name: Install pip packages - required version
      ansible.builtin.pip:
        name: "{{ item.name }}"
        version: "{{ item.version }}"
        state: present
      with_items: "{{ remnux_pip_packages_version | default(_remnux_pip_packages_version) }}"
      register: pkg_result
      until: pkg_result is success
    - name: Install pip packages
      ansible.builtin.pip:
        name: "{{ remnux_pip_packages }}"
        state: present
      register: pkg_result
      until: pkg_result is success
- name: Virtualenv pip
  when: remnux_pip_virtualenv | string
  block:
    - name: Install pip packages - required version - virtualenv
      ansible.builtin.pip:
        name: "{{ item.name }}"
        version: "{{ item.version }}"
        state: present
        virtualenv: "{{ remnux_pip_virtualenv }}"
      with_items: "{{ remnux_pip_packages_version | default(_remnux_pip_packages_version) }}"
      # https://github.com/pypa/virtualenv/issues/2350
      environment:
        DEB_PYTHON_INSTALL_LAYOUT: 'deb'
    ## avoid conflict on six when installed along sift
    ## if get 'setuptools must be installed to install from a source distribution', try to erase virtualenv and replay
    ## https://github.com/pypa/pip/issues/2931#issuecomment-151074766
    - name: Install pip packages - virtualenv
      ansible.builtin.pip:
        name: "{{ ['setuptools', 'pip', 'pycrypto', 'pyparsing', 'appdirs'] + remnux_pip_packages }}"
        state: present
        virtualenv: "{{ remnux_pip_virtualenv }}"
      register: pkg_result
      until: pkg_result is success
      environment:
        DEB_PYTHON_INSTALL_LAYOUT: 'deb'

- name: Install Ruby Gems
  community.general.gem:
    name: "{{ item.n }}"
    version: "{{ item.v }}"
    state: "present"
    user_install: "no"
  with_items: "{{ remnux_ruby_gems }}"
  register: pkg_result
  until: pkg_result is success
- name: Install Ruby Gems - v2
  community.general.gem:
    name: passivedns-client
    state: present
    user_install: no
    executable: "{{ remnux_gem_exec }}"
  register: pkg_result
  until: pkg_result is success

- name: Tweaking Ruby Gems Configuration
  ansible.builtin.file:
    # This is needed for Origami PDF Walker
    dest: "/home/{{ remnux_user }}/.local/share"
    owner: "{{ remnux_user }}"
    group: "{{ remnux_user }}"
    mode: '0700'
    state: directory
# This is needed for passivedns-client
- name: Check if user passivedns-client config exists
  ansible.builtin.stat:
    path: "/home/{{ remnux_user }}/.passivedns-client"
  register: passivednsclient
- name: Review permissions for passivedns client
  ansible.builtin.file:
    dest: "/home/{{ remnux_user }}/.passivedns-client"
    owner: "{{ remnux_user }}"
    group: "{{ remnux_user }}"
    mode: '0600'
    state: touch
  when: not passivednsclient.stat.exists

- name: Updating REMnux documentation
  ansible.builtin.file:
    path: "/home/{{ remnux_user }}/Desktop"
    owner: "{{ remnux_user }}"
    state: "directory"
    mode: "0700"
- name: Check /usr/share/remnux/docs/sitemap.xml exists
  ansible.builtin.stat:
    path: /usr/share/remnux/docs/sitemap.xml
  register: remnuxdocs
- name: Git clone Remnux docs
  ansible.builtin.git:
    repo: https://github.com/REMnux/docs.git
    dest: /usr/share/remnux/docs
    version: "{{ remnux_docs_version | default('41d4e5f97dc1d37544213c034348046b9745677e') }}"
  when: not remnuxdocs.stat.exists
- name: Symlink remnux docs on desktop
  ansible.builtin.file:
    src: /usr/share/remnux/docs/README.md
    path: "/home/{{ remnux_user }}/Desktop/REMnux-README.md"
    mode: '0644'
    state: link

- name: Ensure /var/www directory exists
  ansible.builtin.file:
    path: /var/www
    state: directory
    mode: 0755
- name: Map remnux docs inside webserver root
  ansible.builtin.file:
    src: /usr/share/remnux/docs
    path: /var/www/remnux-docs
    mode: '0777'
    state: link

- name: Creating mount points and other directories
  ansible.builtin.file:
    dest: "{{ item }}"
    mode: "0755"
    state: "directory"
  with_items:
    - /mnt/cdrom
    - /opt
- name: Ensure /var/log/thug directory exists
  ansible.builtin.file:
    dest: /var/log/thug
    mode: 0777
    state: directory

- name: Sshd | disable usedns
  ansible.builtin.lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: '^UseDNS no'
    line: 'UseDNS no'
    mode: '0644'

- name: Stopping and disabling daemons for on-demand usage
  ansible.builtin.service:
    name: "{{ item }}"
    state: stopped
    enabled: no
  with_items: "{{ remnux_services_disable }}"

- name: Debug | ansible_virtualization_type var
  ansible.builtin.debug:
    var: ansible_virtualization_type
- name: Modules exclusions for VM
  ansible.builtin.lineinfile:
    dest: /etc/modprobe.d/blacklist.conf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    mode: '0644'
    state: present
    create: yes
    backup: yes
  with_items:
    - { regexp: "^blacklist i2c-piix4", line: "blacklist i2c-piix4" }
    - { regexp: "^blacklist intel_rapl", line: "blacklist intel_rapl" }
  when: vm is defined and vm

- name: Debian | Remove some packages
  ansible.builtin.apt:
    name:
      - xscreensaver
      - xscreensaver-data
    state: absent

# - name: Setting up /etc/fstab for CD-ROM
#   #lineinfile: dest=/etc/fstab regexp={{ item.regexp }} line="{{ item.line }}" state={{ item.state | default("present") }}
#   lineinfile: dest=/etc/fstab regexp={{ item.regexp }} line="{{ item.line }}" state=present
#     - { regexp: '^/dev/sr0  /mnt/cdrom  udf,iso9660 user,noauto,exec,utf8   0   0', line: '/dev/sr0  /mnt/cdrom  udf,iso9660 user,noauto,exec,utf8   0   0' }
#     - { regexp: '^/dev/fd0', line: '#/dev/fd0' }
- name: Setting up USB auto-mount options
  ansible.builtin.lineinfile:
    dest: /etc/usbmount/usbmount.conf
    regexp: '\"$'
    line: ' ntfs exfat\"'
    mode: '0644'
  when:
    - (ansible_distribution == "Ubuntu" and ansible_distribution_major_version|int <= 20)
- name: Enforce noclobber in remnux user bashrc
  ansible.builtin.lineinfile:
    dest: "/home/{{ remnux_user }}/.bashrc"
    regexp: '^set -o noclobber'
    line: 'set -o noclobber'
    mode: '0600'
    create: yes
- name: Configuring packet capture capabilities for non-root users
  # command: setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip' /usr/bin/dumpcap     ## NOK
  # capabilities: path=/usr/bin/dumpcap capability='CAP_NET_RAW+eip CAP_NET_ADMIN+eip' state=present     ## NOK
  community.general.capabilities:
    path: /usr/bin/dumpcap
    capability: "{{ item }}"
    state: present
  with_items:
    - CAP_NET_RAW+eip
    - CAP_NET_ADMIN+eip
- name: Configuring sudo
  ansible.builtin.lineinfile:
    dest: /etc/sudoers
    regexp: "^{{ remnux_user }} ALL=NOPASSWD: ALL"
    line: "{{ remnux_user }} ALL=NOPASSWD: ALL"
    mode: '0440'
    backup: yes
    validate: 'visudo -cf %s'
## why ?
- name: Disable sudoers secure_path
  ansible.builtin.replace:
    dest: '/etc/sudoers'
    regexp: '^Defaults        secure_path='
    replace: '#Defaults       secure_path='
    mode: '0440'
    backup: yes
    validate: 'visudo -cf %s'

# - name: Setting up aliases
#   lineinfile: dest=/home/{{ remnux_user }}/.bash_aliases regexp={{ item.regexp }} line="{{ item.line }}" state={{ item.state | default("present") }}
#     - { regexp: "alias mountwin='mount -o ro,loop,show_sys_files,streams_interface=windows'", line: "alias mountwin='mount -o ro,loop,show_sys_files,streams_interface=windows" }
#     - { regexp: '', line: '' }
# - lineinfile: dest=/home/{{ remnux_user }}/.bashrc regexp={{ item.regexp }} line="{{ item.line }}" state={{ item.state | default("present") }}
#     - { regexp: 'source /usr/share/remnux/remnux-aliases.sh', line: 'source /usr/share/remnux/remnux-aliases.sh' }
# - lineinfile: dest=/root/bashrc regexp={{ item.regexp }} line="{{ item.line }}" state={{ item.state | default("present") }}
#     - { regexp: 'source /usr/share/remnux/remnux-aliases.sh', line: 'source /usr/share/remnux/remnux-aliases.sh' }

- name: Configuring global PATH
  ansible.builtin.replace:
    dest: /etc/environment
    regexp: '^PATH="/usr/local/sbin'
    replace: 'PATH="/opt/remnux-procdot:/opt/remnux-ratdecoders:/opt/remnux-rabcdasm:/opt/remnux-vivisect:/opt/remnux-peepdf:/opt/remnux-thug/src:/opt/remnux-pdfxray-lite:/opt/remnux-viper:/opt/remnux-oletools:/opt/remnux-balbuzard:/opt/remnux-didier:/opt/remnux-scripts:/usr/local/sbin'  # noqa 204
    mode: '0644'

- name: Check if /etc/apt/apt.conf.d/10periodic exists
  ansible.builtin.stat:
    path: /etc/apt/apt.conf.d/10periodic
  register: apt10periodic
- name: Disable automatic updates
  ansible.builtin.replace:
    dest: /etc/apt/apt.conf.d/10periodic
    regexp: '^APT::Periodic::Update-Package-Lists \"1\"'
    replace: 'APT::Periodic::Update-Package-Lists \"0\";'
    mode: '0644'
  when: apt10periodic.stat.exists

- name: Import docker
  ansible.builtin.import_tasks: docker.yml
  when: remnux_docker_enable

- name: Setting permissions for {{ remnux_user }}
  ansible.builtin.file:
    dest: "/home/{{ remnux_user }}"
    owner: "{{ remnux_user }}"
    group: "{{ remnux_user }}"
    mode: '0700'

## cleanup
- name: Autoremove unused packages
  ansible.builtin.apt:
    autoremove: yes
